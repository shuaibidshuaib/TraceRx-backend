{"version":3,"file":"NativeClient.js","sources":["../../src/client/NativeClient.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Client from \"./Client.js\";\nimport NativeChannel from \"../channel/NativeChannel.js\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport AccountId from \"../account/AccountId.js\";\nimport LedgerId from \"../LedgerId.js\";\nimport {\n    MAINNET,\n    NATIVE_TESTNET,\n    NATIVE_PREVIEWNET,\n} from \"../constants/ClientConstants.js\";\n\n/**\n * @typedef {import(\"./Client.js\").ClientConfiguration} ClientConfiguration\n */\nexport const Network = {\n    /**\n     * @param {string} name\n     * @returns {{[key: string]: (string | AccountId)}}\n     */\n    fromName(name) {\n        switch (name) {\n            case \"mainnet\":\n                return Network.MAINNET;\n\n            case \"testnet\":\n                return Network.TESTNET;\n\n            case \"previewnet\":\n                return Network.PREVIEWNET;\n\n            default:\n                throw new Error(`unknown network name: ${name}`);\n        }\n    },\n\n    MAINNET: MAINNET,\n    TESTNET: NATIVE_TESTNET,\n    PREVIEWNET: NATIVE_PREVIEWNET,\n};\n\n/**\n * @augments {Client<NativeChannel, *>}\n */\nexport default class NativeClient extends Client {\n    /**\n     * @param {ClientConfiguration} [props]\n     */\n    constructor(props) {\n        super(props);\n\n        if (props != null) {\n            if (typeof props.network === \"string\") {\n                switch (props.network) {\n                    case \"mainnet\":\n                        this.setNetwork(Network.MAINNET);\n                        this.setLedgerId(LedgerId.MAINNET);\n                        break;\n\n                    case \"testnet\":\n                        this.setNetwork(Network.TESTNET);\n                        this.setLedgerId(LedgerId.TESTNET);\n                        break;\n\n                    case \"previewnet\":\n                        this.setNetwork(Network.PREVIEWNET);\n                        this.setLedgerId(LedgerId.PREVIEWNET);\n                        break;\n\n                    default:\n                        throw new Error(\n                            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                            `unknown network: ${props.network}`,\n                        );\n                }\n            } else if (props.network != null) {\n                Client._validateNetworkConsistency(props.network);\n\n                const { shard, realm } = Client._extractShardRealm(\n                    props.network,\n                );\n\n                // Shard and realm are inferred from the network, so we need to set them here\n                // to ensure that the client is properly configured.\n                this._shard = shard;\n                this._realm = realm;\n\n                this.setNetwork(props.network);\n            }\n        }\n    }\n\n    /**\n     * @param {string | ClientConfiguration} data\n     * @returns {NativeClient}\n     */\n    static fromConfig(data) {\n        return new NativeClient(\n            typeof data === \"string\"\n                ? /** @type {ClientConfiguration | undefined} */ (\n                      JSON.parse(data)\n                  )\n                : data,\n        );\n    }\n\n    /**\n     * Construct a client for a specific network.\n     *\n     * It is the responsibility of the caller to ensure that all nodes in the map are part of the\n     * same Hedera network. Failure to do so will result in undefined behavior.\n     *\n     * The client will load balance all requests to Hedera using a simple round-robin scheme to\n     * chose nodes to send transactions to. For one transaction, at most 1/3 of the nodes will be\n     * tried.\n     *\n     * @param {{[key: string]: (string | AccountId)} | string} network\n     * @returns {NativeClient}\n     */\n    static forNetwork(network) {\n        return new NativeClient({\n            network,\n            scheduleNetworkUpdate: false,\n        });\n    }\n\n    /**\n     * @param {string} network\n     * @returns {NativeClient}\n     */\n    static forName(network) {\n        return new NativeClient({ network, scheduleNetworkUpdate: false });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Mainnet access.\n     *\n     * @returns {NativeClient}\n     */\n    static forMainnet() {\n        return new NativeClient({\n            network: \"mainnet\",\n            scheduleNetworkUpdate: false,\n        });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Testnet access.\n     *\n     * @returns {NativeClient}\n     */\n    static forTestnet() {\n        return new NativeClient({\n            network: \"testnet\",\n            scheduleNetworkUpdate: false,\n        });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Previewnet access.\n     *\n     * @returns {NativeClient}\n     */\n    static forPreviewnet() {\n        return new NativeClient({\n            network: \"previewnet\",\n            scheduleNetworkUpdate: false,\n        });\n    }\n\n    /**\n     * @param {{[key: string]: (string | AccountId)} | string} network\n     * @returns {void}\n     */\n    setNetwork(network) {\n        if (typeof network === \"string\") {\n            switch (network) {\n                case \"previewnet\":\n                    this._network.setNetwork(Network.PREVIEWNET);\n                    break;\n                case \"testnet\":\n                    this._network.setNetwork(Network.TESTNET);\n                    break;\n                case \"mainnet\":\n                    this._network.setNetwork(Network.MAINNET);\n            }\n        } else {\n            this._network.setNetwork(network);\n        }\n    }\n\n    /**\n     * @param {string[] | string} mirrorNetwork\n     * @returns {void}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setMirrorNetwork(mirrorNetwork) {\n        // Do nothing as this is not currently supported\n    }\n\n    /**\n     * @override\n     * @returns {(address: string) => NativeChannel}\n     */\n    _createNetworkChannel() {\n        return (address) => new NativeChannel(address);\n    }\n\n    /**\n     * @abstract\n     * @returns {(address: string) => *}\n     */\n    _createMirrorNetworkChannel() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        return (address) => null;\n    }\n}\n"],"names":["Network","MAINNET","TESTNET","NATIVE_TESTNET","PREVIEWNET","NATIVE_PREVIEWNET","NativeClient","Client","constructor","props","super","network","this","setNetwork","setLedgerId","LedgerId","Error","_validateNetworkConsistency","shard","realm","_extractShardRealm","_shard","_realm","fromConfig","data","JSON","parse","forNetwork","scheduleNetworkUpdate","forName","forMainnet","forTestnet","forPreviewnet","_network","setMirrorNetwork","mirrorNetwork","_createNetworkChannel","address","NativeChannel","_createMirrorNetworkChannel"],"mappings":"yOAgBY,MAACA,EAAU,CAqBnBC,QAASA,EACTC,QAASC,EACTC,WAAYC,GAMD,MAAMC,UAAqBC,EAItC,WAAAC,CAAYC,GAGR,GAFAC,MAAMD,GAEO,MAATA,EACA,GAA6B,iBAAlBA,EAAME,QACb,OAAQF,EAAME,SACV,IAAK,UACDC,KAAKC,WAAWb,EAAQC,SACxBW,KAAKE,YAAYC,EAASd,SAC1B,MAEJ,IAAK,UACDW,KAAKC,WAAWb,EAAQE,SACxBU,KAAKE,YAAYC,EAASb,SAC1B,MAEJ,IAAK,aACDU,KAAKC,WAAWb,EAAQI,YACxBQ,KAAKE,YAAYC,EAASX,YAC1B,MAEJ,QACI,MAAM,IAAIY,MAEN,oBAAoBP,EAAME,gBAGnC,GAAqB,MAAjBF,EAAME,QAAiB,CAC9BJ,EAAOU,4BAA4BR,EAAME,SAEzC,MAAMO,MAAEA,EAAKC,MAAEA,GAAUZ,EAAOa,mBAC5BX,EAAME,SAKVC,KAAKS,OAASH,EACdN,KAAKU,OAASH,EAEdP,KAAKC,WAAWJ,EAAME,QACtC,CAEA,CAMI,iBAAOY,CAAWC,GACd,OAAO,IAAIlB,EACS,iBAATkB,EAEGC,KAAKC,MAAMF,GAEfA,EAElB,CAeI,iBAAOG,CAAWhB,GACd,OAAO,IAAIL,EAAa,CACpBK,UACAiB,uBAAuB,GAEnC,CAMI,cAAOC,CAAQlB,GACX,OAAO,IAAIL,EAAa,CAAEK,UAASiB,uBAAuB,GAClE,CAOI,iBAAOE,GACH,OAAO,IAAIxB,EAAa,CACpBK,QAAS,UACTiB,uBAAuB,GAEnC,CAOI,iBAAOG,GACH,OAAO,IAAIzB,EAAa,CACpBK,QAAS,UACTiB,uBAAuB,GAEnC,CAOI,oBAAOI,GACH,OAAO,IAAI1B,EAAa,CACpBK,QAAS,aACTiB,uBAAuB,GAEnC,CAMI,UAAAf,CAAWF,GACP,GAAuB,iBAAZA,EACP,OAAQA,GACJ,IAAK,aACDC,KAAKqB,SAASpB,WAAWb,EAAQI,YACjC,MACJ,IAAK,UACDQ,KAAKqB,SAASpB,WAAWb,EAAQE,SACjC,MACJ,IAAK,UACDU,KAAKqB,SAASpB,WAAWb,EAAQC,cAGzCW,KAAKqB,SAASpB,WAAWF,EAErC,CAOI,gBAAAuB,CAAiBC,GAErB,CAMI,qBAAAC,GACI,OAAQC,GAAY,IAAIC,EAAcD,EAC9C,CAMI,2BAAAE,GAEI,OAAQF,GAAY,IAC5B"}