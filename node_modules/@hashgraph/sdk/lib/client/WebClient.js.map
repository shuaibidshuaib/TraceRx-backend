{"version":3,"file":"WebClient.js","sources":["../../src/client/WebClient.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Client from \"./Client.js\";\nimport WebChannel from \"../channel/WebChannel.js\";\nimport LedgerId from \"../LedgerId.js\";\nimport {\n    MAINNET,\n    WEB_TESTNET,\n    WEB_PREVIEWNET,\n    MirrorNetwork,\n} from \"../constants/ClientConstants.js\";\nimport AddressBookQuery from \"../network/AddressBookQueryWeb.js\";\nimport FileId from \"../file/FileId.js\";\n\n/**\n * @typedef {import(\"./Client.js\").ClientConfiguration} ClientConfiguration\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\nexport const Network = {\n    /**\n     * @param {string} name\n     * @returns {{[key: string]: (string | AccountId)}}\n     */\n    fromName(name) {\n        switch (name) {\n            case \"mainnet\":\n                return Network.MAINNET;\n\n            case \"testnet\":\n                return Network.TESTNET;\n\n            case \"previewnet\":\n                return Network.PREVIEWNET;\n\n            default:\n                throw new Error(`unknown network name: ${name}`);\n        }\n    },\n\n    MAINNET: MAINNET,\n    TESTNET: WEB_TESTNET,\n    PREVIEWNET: WEB_PREVIEWNET,\n};\n\n/**\n * Represents a client for interacting with the Hedera network over the web.\n * The `WebClient` class extends the base `Client` class and provides methods\n * for configuring and managing connections to the Hedera network, including\n * setting the network type (mainnet, testnet, previewnet) and handling\n * transactions and queries.\n * @augments {Client<WebChannel, *>}\n */\nexport default class WebClient extends Client {\n    /**\n     * @param {ClientConfiguration} [props]\n     */\n    constructor(props) {\n        super(props);\n        if (props != null) {\n            if (typeof props.network === \"string\") {\n                switch (props.network) {\n                    case \"mainnet\":\n                        this.setNetwork(Network.MAINNET);\n                        this.setMirrorNetwork(MirrorNetwork.MAINNET);\n                        this.setLedgerId(LedgerId.MAINNET);\n                        break;\n\n                    case \"testnet\":\n                        this.setNetwork(Network.TESTNET);\n                        this.setLedgerId(LedgerId.TESTNET);\n                        this.setMirrorNetwork(MirrorNetwork.TESTNET);\n                        break;\n\n                    case \"previewnet\":\n                        this.setNetwork(Network.PREVIEWNET);\n                        this.setLedgerId(LedgerId.PREVIEWNET);\n                        this.setMirrorNetwork(MirrorNetwork.PREVIEWNET);\n                        break;\n\n                    default:\n                        throw new Error(\n                            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                            `unknown network: ${props.network}`,\n                        );\n                }\n            } else if (props.network != null) {\n                Client._validateNetworkConsistency(props.network);\n\n                const { shard, realm } = Client._extractShardRealm(\n                    props.network,\n                );\n\n                // Shard and realm are inferred from the network, so we need to set them here\n                // to ensure that the client is properly configured.\n                this._shard = shard;\n                this._realm = realm;\n\n                this.setNetwork(props.network);\n            }\n        }\n    }\n\n    /**\n     * @param {string | ClientConfiguration} data\n     * @returns {WebClient}\n     */\n    static fromConfig(data) {\n        return new WebClient(\n            typeof data === \"string\"\n                ? /** @type {ClientConfiguration | undefined} */ (\n                      JSON.parse(data)\n                  )\n                : data,\n        );\n    }\n\n    /**\n     * Construct a client for a specific network.\n     *\n     * It is the responsibility of the caller to ensure that all nodes in the map are part of the\n     * same Hedera network. Failure to do so will result in undefined behavior.\n     *\n     * The client will load balance all requests to Hedera using a simple round-robin scheme to\n     * chose nodes to send transactions to. For one transaction, at most 1/3 of the nodes will be\n     * tried.\n     *\n     * @param {{[key: string]: (string | AccountId)} | string} network\n     * @returns {WebClient}\n     */\n    static forNetwork(network) {\n        return new WebClient({ network });\n    }\n\n    /**\n     * @param {string} network\n     * @returns {WebClient}\n     */\n    static forName(network) {\n        return new WebClient({ network });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Mainnet access.\n     *\n     * @returns {WebClient}\n     */\n    static forMainnet() {\n        return new WebClient({\n            network: \"mainnet\",\n        });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Testnet access.\n     *\n     * @returns {WebClient}\n     */\n    static forTestnet() {\n        return new WebClient({\n            network: \"testnet\",\n        });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Previewnet access.\n     *\n     * @returns {WebClient}\n     */\n    static forPreviewnet() {\n        return new WebClient({\n            network: \"previewnet\",\n        });\n    }\n\n    /**\n     * Construct a client configured to use mirror nodes.\n     * This will query the address book to get the network nodes.\n     *\n     * @param {string[] | string} mirrorNetwork\n     * @returns {Promise<WebClient>}\n     */\n    static async forMirrorNetwork(mirrorNetwork) {\n        const client = new WebClient();\n\n        client.setMirrorNetwork(mirrorNetwork);\n\n        await client.updateNetwork();\n\n        return client;\n    }\n\n    /**\n     * @param {{[key: string]: (string | AccountId)} | string} network\n     * @returns {void}\n     */\n    setNetwork(network) {\n        if (typeof network === \"string\") {\n            switch (network) {\n                case \"previewnet\":\n                    this._network.setNetwork(Network.PREVIEWNET);\n                    break;\n                case \"testnet\":\n                    this._network.setNetwork(Network.TESTNET);\n                    break;\n                case \"mainnet\":\n                    this._network.setNetwork(Network.MAINNET);\n            }\n        } else {\n            this._network.setNetwork(network);\n        }\n    }\n\n    /**\n     * @param {string[] | string} mirrorNetwork\n     * @returns {this}\n     */\n    setMirrorNetwork(mirrorNetwork) {\n        if (typeof mirrorNetwork === \"string\") {\n            switch (mirrorNetwork) {\n                case \"local-node\":\n                    this._mirrorNetwork.setNetwork(MirrorNetwork.LOCAL_NODE);\n                    break;\n                case \"previewnet\":\n                    this._mirrorNetwork.setNetwork(MirrorNetwork.PREVIEWNET);\n                    break;\n                case \"testnet\":\n                    this._mirrorNetwork.setNetwork(MirrorNetwork.TESTNET);\n                    break;\n                case \"mainnet\":\n                    this._mirrorNetwork.setNetwork(MirrorNetwork.MAINNET);\n                    break;\n                default:\n                    this._mirrorNetwork.setNetwork([mirrorNetwork]);\n            }\n        } else {\n            this._mirrorNetwork.setNetwork(mirrorNetwork);\n        }\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @returns {Promise<void>}\n     */\n    async updateNetwork() {\n        if (this._isUpdatingNetwork) {\n            return;\n        }\n\n        this._isUpdatingNetwork = true;\n\n        try {\n            const addressBook = await new AddressBookQuery()\n                .setFileId(\n                    FileId.getAddressBookFileIdFor(this.shard, this.realm),\n                )\n                .execute(this);\n\n            /** @type {Record<string, AccountId>} */\n            const network = {};\n            for (const nodeAddress of addressBook.nodeAddresses) {\n                for (const endpoint of nodeAddress.addresses) {\n                    if (nodeAddress.accountId != null) {\n                        network[endpoint.toString()] = nodeAddress.accountId;\n                    }\n                }\n            }\n\n            this.setNetwork(network);\n        } catch (/** @type {unknown} */ error) {\n            if (this._logger) {\n                const errorMessage =\n                    error instanceof Error ? error.message : String(error);\n                this._logger.trace(\n                    `failed to update client address book: ${errorMessage}`,\n                );\n            }\n        } finally {\n            this._isUpdatingNetwork = false;\n        }\n    }\n\n    /**\n     * @override\n     * @returns {(address: string) => WebChannel}\n     */\n    _createNetworkChannel() {\n        return (address) => new WebChannel(address);\n    }\n\n    /**\n     * @override\n     * @returns {(address: string) => *}\n     */\n    _createMirrorNetworkChannel() {\n        return () => {\n            throw new Error(\"mirror support is not supported in browsers\");\n        };\n    }\n}\n"],"names":["Network","MAINNET","TESTNET","WEB_TESTNET","PREVIEWNET","WEB_PREVIEWNET","WebClient","Client","constructor","props","super","network","this","setNetwork","setMirrorNetwork","MirrorNetwork","setLedgerId","LedgerId","Error","_validateNetworkConsistency","shard","realm","_extractShardRealm","_shard","_realm","fromConfig","data","JSON","parse","forNetwork","forName","forMainnet","forTestnet","forPreviewnet","forMirrorNetwork","mirrorNetwork","client","updateNetwork","_network","_mirrorNetwork","LOCAL_NODE","_isUpdatingNetwork","addressBook","AddressBookQuery","setFileId","FileId","getAddressBookFileIdFor","execute","nodeAddress","nodeAddresses","endpoint","addresses","accountId","toString","error","_logger","errorMessage","message","String","trace","_createNetworkChannel","address","WebChannel","_createMirrorNetworkChannel"],"mappings":"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"}