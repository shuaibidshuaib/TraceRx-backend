{"version":3,"file":"ContractInfo.js","sources":["../../src/contract/ContractInfo.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport ContractId from \"./ContractId.js\";\nimport AccountId from \"../account/AccountId.js\";\nimport StakingInfo from \"../StakingInfo.js\";\nimport Timestamp from \"../Timestamp.js\";\nimport Duration from \"../Duration.js\";\nimport Hbar from \"../Hbar.js\";\nimport Long from \"long\";\nimport * as HieroProto from \"@hashgraph/proto\";\nimport TokenRelationshipMap from \"../account/TokenRelationshipMap.js\";\nimport Key from \"../Key.js\";\nimport LedgerId from \"../LedgerId.js\";\n\nconst { proto } = HieroProto;\n\n/**\n * @typedef {import(\"../StakingInfo.js\").StakingInfoJson} StakingInfoJson\n */\n\n/**\n * Response when the client sends the node CryptoGetInfoQuery.\n */\nexport default class ContractInfo {\n    /**\n     * @private\n     * @param {object} props\n     * @param {ContractId} props.contractId\n     * @param {AccountId} props.accountId\n     * @param {string} props.contractAccountId\n     * @param {?Key} props.adminKey\n     * @param {Timestamp} props.expirationTime\n     * @param {Duration} props.autoRenewPeriod\n     * @param {?AccountId} props.autoRenewAccountId\n     * @param {Long} props.storage\n     * @param {string} props.contractMemo\n     * @param {Hbar} props.balance\n     * @param {boolean} props.isDeleted\n     * @param {TokenRelationshipMap} props.tokenRelationships\n     * @param {LedgerId|null} props.ledgerId\n     * @param {?StakingInfo} props.stakingInfo\n     */\n    constructor(props) {\n        /**\n         * ID of the contract instance, in the format used in transactions.\n         *\n         * @readonly\n         */\n        this.contractId = props.contractId;\n\n        /**\n         * ID of the cryptocurrency account owned by the contract instance,\n         * in the format used in transactions.\n         *\n         * @readonly\n         */\n        this.accountId = props.accountId;\n\n        /**\n         * ID of both the contract instance and the cryptocurrency account owned by the contract\n         * instance, in the format used by Solidity.\n         *\n         * @readonly\n         */\n        this.contractAccountId = props.contractAccountId;\n\n        /**\n         * The state of the instance and its fields can be modified arbitrarily if this key signs a\n         * transaction to modify it. If this is null, then such modifications are not possible,\n         * and there is no administrator that can override the normal operation of this smart\n         * contract instance. Note that if it is created with no admin keys, then there is no\n         * administrator to authorize changing the admin keys, so there can never be any admin keys\n         * for that instance.\n         *\n         * @readonly\n         */\n        this.adminKey = props.adminKey != null ? props.adminKey : null;\n\n        /**\n         * The current time at which this contract instance (and its account) is set to expire.\n         *\n         * @readonly\n         */\n        this.expirationTime = props.expirationTime;\n\n        /**\n         * The expiration time will extend every this many seconds. If there are insufficient funds,\n         * then it extends as long as possible. If the account is empty when it expires,\n         * then it is deleted.\n         *\n         * @readonly\n         */\n        this.autoRenewPeriod = props.autoRenewPeriod;\n\n        /**\n         * ID of the an account to charge for auto-renewal of this contract. If not set, or set\n         * to an account with zero hbar balance, the contract's own hbar balance will be used\n         * to cover auto-renewal fees.\n         *\n         * @readonly\n         */\n        this.autoRenewAccountId = props.autoRenewAccountId;\n\n        /**\n         * Number of bytes of storage being used by this instance (which affects the cost to\n         * extend the expiration time).\n         *\n         * @readonly\n         */\n        this.storage = props.storage;\n\n        /**\n         * The memo associated with the contract (max 100 bytes).\n         *\n         * @readonly\n         */\n        this.contractMemo = props.contractMemo;\n\n        /**\n         * The current balance of the contract.\n         *\n         * @readonly\n         */\n        this.balance = props.balance;\n\n        /**\n         * Whether the contract has been deleted\n         *\n         * @readonly\n         */\n        this.isDeleted = props.isDeleted;\n\n        /**\n         * The tokens associated to the contract\n         *\n         * @readonly\n         */\n        this.tokenRelationships = props.tokenRelationships;\n\n        /**\n         * The ledger ID the response was returned from; please see <a href=\"https://github.com/hashgraph/hedera-improvement-proposal/blob/master/HIP/hip-198.md\">HIP-198</a> for the network-specific IDs.\n         */\n        this.ledgerId = props.ledgerId;\n\n        /**\n         * Staking metadata for this account.\n         */\n        this.stakingInfo = props.stakingInfo;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ContractGetInfoResponse.IContractInfo} info\n     * @returns {ContractInfo}\n     */\n    static _fromProtobuf(info) {\n        const autoRenewPeriod = /** @type {Long | number} */ (\n            /** @type {HieroProto.proto.IDuration} */ (info.autoRenewPeriod)\n                .seconds\n        );\n\n        return new ContractInfo({\n            contractId: ContractId._fromProtobuf(\n                /** @type {HieroProto.proto.IContractID} */ (info.contractID),\n            ),\n            accountId: AccountId._fromProtobuf(\n                /** @type {HieroProto.proto.IAccountID} */ (info.accountID),\n            ),\n            contractAccountId:\n                info.contractAccountID != null ? info.contractAccountID : \"\",\n            adminKey:\n                info.adminKey != null\n                    ? Key._fromProtobufKey(info.adminKey)\n                    : null,\n            expirationTime: Timestamp._fromProtobuf(\n                /** @type {HieroProto.proto.ITimestamp} */ (\n                    info.expirationTime\n                ),\n            ),\n            autoRenewPeriod: new Duration(autoRenewPeriod),\n            autoRenewAccountId:\n                info.autoRenewAccountId != null\n                    ? AccountId._fromProtobuf(info.autoRenewAccountId)\n                    : null,\n            storage:\n                info.storage != null\n                    ? info.storage instanceof Long\n                        ? info.storage\n                        : Long.fromValue(info.storage)\n                    : Long.ZERO,\n            contractMemo: info.memo != null ? info.memo : \"\",\n            balance: Hbar.fromTinybars(info.balance != null ? info.balance : 0),\n            isDeleted: /** @type {boolean} */ (info.deleted),\n            tokenRelationships: TokenRelationshipMap._fromProtobuf(\n                info.tokenRelationships != null ? info.tokenRelationships : [],\n            ),\n            ledgerId:\n                info.ledgerId != null\n                    ? LedgerId.fromBytes(info.ledgerId)\n                    : null,\n            stakingInfo:\n                info.stakingInfo != null\n                    ? StakingInfo._fromProtobuf(info.stakingInfo)\n                    : null,\n        });\n    }\n\n    /**\n     * @internal\n     * @returns {HieroProto.proto.ContractGetInfoResponse.IContractInfo}\n     */\n    _toProtobuf() {\n        return {\n            contractID: this.contractId._toProtobuf(),\n            accountID: this.accountId._toProtobuf(),\n            contractAccountID: this.contractAccountId,\n            adminKey:\n                this.adminKey != null ? this.adminKey._toProtobufKey() : null,\n            expirationTime: this.expirationTime._toProtobuf(),\n            autoRenewPeriod:\n                this.autoRenewPeriod != null\n                    ? this.autoRenewPeriod._toProtobuf()\n                    : null,\n            autoRenewAccountId:\n                this.autoRenewAccountId != null\n                    ? this.autoRenewAccountId._toProtobuf()\n                    : null,\n            storage: this.storage,\n            memo: this.contractMemo,\n            balance: this.balance.toTinybars(),\n            deleted: this.isDeleted,\n            tokenRelationships:\n                this.tokenRelationships != null\n                    ? this.tokenRelationships._toProtobuf()\n                    : null,\n            ledgerId: this.ledgerId != null ? this.ledgerId.toBytes() : null,\n            stakingInfo:\n                this.stakingInfo != null\n                    ? this.stakingInfo._toProtobuf()\n                    : null,\n        };\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ContractInfo}\n     */\n    static fromBytes(bytes) {\n        return ContractInfo._fromProtobuf(\n            proto.ContractGetInfoResponse.ContractInfo.decode(bytes),\n        );\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return proto.ContractGetInfoResponse.ContractInfo.encode(\n            this._toProtobuf(),\n        ).finish();\n    }\n}\n"],"names":["proto","HieroProto","ContractInfo","constructor","props","this","contractId","accountId","contractAccountId","adminKey","expirationTime","autoRenewPeriod","autoRenewAccountId","storage","contractMemo","balance","isDeleted","tokenRelationships","ledgerId","stakingInfo","Object","freeze","_fromProtobuf","info","ContractId","AccountId","contractAccountID","Key","_fromProtobufKey","Timestamp","Duration","Long","fromValue","ZERO","memo","Hbar","fromTinybars","TokenRelationshipMap","LedgerId","fromBytes","StakingInfo","_toProtobuf","contractID","accountID","_toProtobufKey","toTinybars","deleted","toBytes","bytes","ContractGetInfoResponse","decode","encode","finish"],"mappings":"8VAcA,MAAMA,MAAEA,GAAUC,EASH,MAAMC,EAmBjB,WAAAC,CAAYC,GAMRC,KAAKC,WAAaF,EAAME,WAQxBD,KAAKE,UAAYH,EAAMG,UAQvBF,KAAKG,kBAAoBJ,EAAMI,kBAY/BH,KAAKI,SAA6B,MAAlBL,EAAMK,SAAmBL,EAAMK,SAAW,KAO1DJ,KAAKK,eAAiBN,EAAMM,eAS5BL,KAAKM,gBAAkBP,EAAMO,gBAS7BN,KAAKO,mBAAqBR,EAAMQ,mBAQhCP,KAAKQ,QAAUT,EAAMS,QAOrBR,KAAKS,aAAeV,EAAMU,aAO1BT,KAAKU,QAAUX,EAAMW,QAOrBV,KAAKW,UAAYZ,EAAMY,UAOvBX,KAAKY,mBAAqBb,EAAMa,mBAKhCZ,KAAKa,SAAWd,EAAMc,SAKtBb,KAAKc,YAAcf,EAAMe,YAEzBC,OAAOC,OAAOhB,KACtB,CAOI,oBAAOiB,CAAcC,GACjB,MAAMZ,EACyCY,EAAoB,gBAElE,QAED,OAAO,IAAIrB,EAAa,CACpBI,WAAYkB,EAAWF,cAC0BC,EAAe,YAEhEhB,UAAWkB,EAAUH,cAC2BC,EAAc,WAE9Df,kBAC8B,MAA1Be,EAAKG,kBAA4BH,EAAKG,kBAAoB,GAC9DjB,SACqB,MAAjBc,EAAKd,SACCkB,EAAIC,iBAAiBL,EAAKd,UAC1B,KACVC,eAAgBmB,EAAUP,cAElBC,EACpB,gBAEYZ,gBAAiB,IAAImB,EAASnB,GAC9BC,mBAC+B,MAA3BW,EAAKX,mBACCa,EAAUH,cAAcC,EAAKX,oBAC7B,KACVC,QACoB,MAAhBU,EAAKV,QACCU,EAAKV,mBAAmBkB,EACpBR,EAAKV,QACLkB,EAAKC,UAAUT,EAAKV,SACxBkB,EAAKE,KACfnB,aAA2B,MAAbS,EAAKW,KAAeX,EAAKW,KAAO,GAC9CnB,QAASoB,EAAKC,aAA6B,MAAhBb,EAAKR,QAAkBQ,EAAKR,QAAU,GACjEC,UAAmCO,EAAY,QAC/CN,mBAAoBoB,EAAqBf,cACV,MAA3BC,EAAKN,mBAA6BM,EAAKN,mBAAqB,IAEhEC,SACqB,MAAjBK,EAAKL,SACCoB,EAASC,UAAUhB,EAAKL,UACxB,KACVC,YACwB,MAApBI,EAAKJ,YACCqB,EAAYlB,cAAcC,EAAKJ,aAC/B,MAEtB,CAMI,WAAAsB,GACI,MAAO,CACHC,WAAYrC,KAAKC,WAAWmC,cAC5BE,UAAWtC,KAAKE,UAAUkC,cAC1Bf,kBAAmBrB,KAAKG,kBACxBC,SACqB,MAAjBJ,KAAKI,SAAmBJ,KAAKI,SAASmC,iBAAmB,KAC7DlC,eAAgBL,KAAKK,eAAe+B,cACpC9B,gBAC4B,MAAxBN,KAAKM,gBACCN,KAAKM,gBAAgB8B,cACrB,KACV7B,mBAC+B,MAA3BP,KAAKO,mBACCP,KAAKO,mBAAmB6B,cACxB,KACV5B,QAASR,KAAKQ,QACdqB,KAAM7B,KAAKS,aACXC,QAASV,KAAKU,QAAQ8B,aACtBC,QAASzC,KAAKW,UACdC,mBAC+B,MAA3BZ,KAAKY,mBACCZ,KAAKY,mBAAmBwB,cACxB,KACVvB,SAA2B,MAAjBb,KAAKa,SAAmBb,KAAKa,SAAS6B,UAAY,KAC5D5B,YACwB,MAApBd,KAAKc,YACCd,KAAKc,YAAYsB,cACjB,KAEtB,CAMI,gBAAOF,CAAUS,GACb,OAAO9C,EAAaoB,cAChBtB,EAAMiD,wBAAwB/C,aAAagD,OAAOF,GAE9D,CAKI,OAAAD,GACI,OAAO/C,EAAMiD,wBAAwB/C,aAAaiD,OAC9C9C,KAAKoC,eACPW,QACV"}