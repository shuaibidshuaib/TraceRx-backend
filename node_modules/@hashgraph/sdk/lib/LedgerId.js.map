{"version":3,"file":"LedgerId.js","sources":["../src/LedgerId.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport * as hex from \"./encoding/hex.js\";\n\n/**\n * Represents the ID of a network.\n */\nexport default class LedgerId {\n    /**\n     * @hideconstructor\n     * @internal\n     * @param {Uint8Array} ledgerId\n     */\n    constructor(ledgerId) {\n        /**\n         * @readonly\n         * @type {Uint8Array}\n         */\n        this._ledgerId = ledgerId;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * @param {string} ledgerId\n     * @returns {LedgerId}\n     */\n    static fromString(ledgerId) {\n        switch (ledgerId) {\n            case NETNAMES[0]:\n            case \"0\":\n                return LedgerId.MAINNET;\n            case NETNAMES[1]:\n            case \"1\":\n                return LedgerId.TESTNET;\n            case NETNAMES[2]:\n            case \"2\":\n                return LedgerId.PREVIEWNET;\n            case NETNAMES[3]:\n            case \"3\":\n                return LedgerId.LOCAL_NODE;\n            default: {\n                let ledgerIdDecoded = hex.decode(ledgerId);\n                if (ledgerIdDecoded.length == 0 && ledgerId.length != 0) {\n                    throw new Error(\"Default reached for fromString\");\n                } else {\n                    return new LedgerId(ledgerIdDecoded);\n                }\n            }\n        }\n    }\n\n    /**\n     * If the ledger ID is a known value such as `[0]`, `[1]`, `[2]` this method\n     * will instead return \"mainnet\", \"testnet\", or \"previewnet\", otherwise it will\n     * hex encode the bytes.\n     *\n     * @returns {string}\n     */\n    toString() {\n        if (this._ledgerId.length == 1) {\n            switch (this._ledgerId[0]) {\n                case 0:\n                    return NETNAMES[0];\n                case 1:\n                    return NETNAMES[1];\n                case 2:\n                    return NETNAMES[2];\n                case 3:\n                    return NETNAMES[3];\n                default:\n                    return hex.encode(this._ledgerId);\n            }\n        } else {\n            return hex.encode(this._ledgerId);\n        }\n    }\n\n    /**\n     * Using the UTF-8 byte representation of \"mainnet\", \"testnet\",\n     * or \"previewnet\" is NOT supported.\n     *\n     * @param {Uint8Array} bytes\n     * @returns {LedgerId}\n     */\n    static fromBytes(bytes) {\n        return new LedgerId(bytes);\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return this._ledgerId;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isMainnet() {\n        return this.toString() == NETNAMES[0];\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isTestnet() {\n        return this.toString() == NETNAMES[1];\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isPreviewnet() {\n        return this.toString() == NETNAMES[2];\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isLocalNode() {\n        return this.toString() == NETNAMES[3];\n    }\n}\n\nconst NETNAMES = [\"mainnet\", \"testnet\", \"previewnet\", \"local-node\"];\n\nLedgerId.MAINNET = new LedgerId(new Uint8Array([0]));\n\nLedgerId.TESTNET = new LedgerId(new Uint8Array([1]));\n\nLedgerId.PREVIEWNET = new LedgerId(new Uint8Array([2]));\n\nLedgerId.LOCAL_NODE = new LedgerId(new Uint8Array([3]));\n"],"names":["LedgerId","constructor","ledgerId","this","_ledgerId","Object","freeze","fromString","NETNAMES","MAINNET","TESTNET","PREVIEWNET","LOCAL_NODE","ledgerIdDecoded","hex.decode","length","Error","toString","hex.encode","fromBytes","bytes","toBytes","isMainnet","isTestnet","isPreviewnet","isLocalNode","Uint8Array"],"mappings":"uDAOe,MAAMA,EAMjB,WAAAC,CAAYC,GAKRC,KAAKC,UAAYF,EAEjBG,OAAOC,OAAOH,KACtB,CAMI,iBAAOI,CAAWL,GACd,OAAQA,GACJ,KAAKM,EAAS,GACd,IAAK,IACD,OAAOR,EAASS,QACpB,KAAKD,EAAS,GACd,IAAK,IACD,OAAOR,EAASU,QACpB,KAAKF,EAAS,GACd,IAAK,IACD,OAAOR,EAASW,WACpB,KAAKH,EAAS,GACd,IAAK,IACD,OAAOR,EAASY,WACpB,QAAS,CACL,IAAIC,EAAkBC,EAAWZ,GACjC,GAA8B,GAA1BW,EAAgBE,QAAkC,GAAnBb,EAASa,OACxC,MAAM,IAAIC,MAAM,kCAEhB,OAAO,IAAIhB,EAASa,EAExC,EAEA,CASI,QAAAI,GACI,GAA6B,GAAzBd,KAAKC,UAAUW,OAcf,OAAOG,EAAWf,KAAKC,WAbvB,OAAQD,KAAKC,UAAU,IACnB,KAAK,EACD,OAAOI,EAAS,GACpB,KAAK,EACD,OAAOA,EAAS,GACpB,KAAK,EACD,OAAOA,EAAS,GACpB,KAAK,EACD,OAAOA,EAAS,GACpB,QACI,OAAOU,EAAWf,KAAKC,WAK3C,CASI,gBAAOe,CAAUC,GACb,OAAO,IAAIpB,EAASoB,EAC5B,CAKI,OAAAC,GACI,OAAOlB,KAAKC,SACpB,CAKI,SAAAkB,GACI,OAAOnB,KAAKc,YAAcT,EAAS,EAC3C,CAKI,SAAAe,GACI,OAAOpB,KAAKc,YAAcT,EAAS,EAC3C,CAKI,YAAAgB,GACI,OAAOrB,KAAKc,YAAcT,EAAS,EAC3C,CAKI,WAAAiB,GACI,OAAOtB,KAAKc,YAAcT,EAAS,EAC3C,EAGA,MAAMA,EAAW,CAAC,UAAW,UAAW,aAAc,cAEtDR,EAASS,QAAU,IAAIT,EAAS,IAAI0B,WAAW,CAAC,KAEhD1B,EAASU,QAAU,IAAIV,EAAS,IAAI0B,WAAW,CAAC,KAEhD1B,EAASW,WAAa,IAAIX,EAAS,IAAI0B,WAAW,CAAC,KAEnD1B,EAASY,WAAa,IAAIZ,EAAS,IAAI0B,WAAW,CAAC"}